#include "Pattern.h"

VirutScanCleanStruct ListVirutClean[6] =
{
    //  VirusNo                                                                               Pattern                                         CheckCall SizeOfBackWard LenghtSub Base EBP SizeOverWrite TestAdd TypeDecode Key KeyAdd    
    {Win32_Virut_F, {0xe8, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x8b, 0x04, 0x24, 0xfc, 0x89, 0x98, 0xcf, 0x2f, 0x00, 0x00, 0xf7, 0x80, 0x8a, 0x28}, 0x80000000, 0x289b, 0x54, 0x5a, 0x64, 0x69, 0x098, NonDetectVirut, 0, 0}, 
    {Win32_Virut_I, {0xe8, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x8b, 0x04, 0x24, 0x8b, 0x88, 0xbb, 0x29, 0x00, 0x00, 0x89, 0x98, 0x03, 0x33, 0x00}, 0x00400000, 0x29cb, 0x54, 0x5a, 0x64, 0x69, 0x0f2, NonDetectVirut, 0, 0}, 
    {Win32_Virut_J, {0x90, 0xe8, 0x00, 0x00, 0x00, 0x00, 0x8b, 0x04, 0x24, 0xf7, 0x80, 0x2b, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x89}, 0x80000000, 0x243b, 0x52, 0x5e, 0x68, 0x6d, 0x15e, NonDetectVirut, 0, 0}, 
    {Win32_Virut_K, {0x90, 0xe8, 0x00, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x04, 0x24, 0xf7, 0x80, 0x84, 0x23, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80}, 0x80000000, 0x2393, 0x54, 0x60, 0x6a, 0x6f, 0x157, NonDetectVirut, 0, 0}, 
    {Win32_Virut_L, {0xe8, 0x00, 0x00, 0x00, 0x00, 0x8b, 0x04, 0x24, 0xfc, 0x89, 0x98, 0xc7, 0x32, 0x00, 0x00, 0x8b, 0x88, 0x7f, 0x29, 0x00}, 0x10000000, 0x298f, 0x53, 0x59, 0x63, 0x68, 0x0f9, NonDetectVirut, 0, 0}, 
    {Win32_Virut_M, {0xe8, 0x00, 0x00, 0x00, 0x00, 0x8b, 0x04, 0x24, 0xfc, 0x89, 0x98, 0x33, 0x30, 0x00, 0x00, 0x8b, 0x88, 0xee, 0x28, 0x00}, 0x80000000, 0x28ff, 0x55, 0x5b, 0x65, 0x6a, 0x0fb, NonDetectVirut, 0, 0}
};

StochasticPattern Virut_AB_Patt1[]=
{
/*0*/{1, 2, {1, END_STOCHASTIC_PATTERN}, {0x0F, 0x83},               {0xFF, 0xFF}}, 
/*1*/{1, 1, {0, END_STOCHASTIC_PATTERN}, {0x73},                     {0xFF}}, 
/*2*/{1, 2, {   END_STOCHASTIC_PATTERN}, {0x81, 0x80},               {0xFF, 0xF8}}, 
/*3*/{1, 3, {   END_STOCHASTIC_PATTERN}, {0x83, 0xE8, 0x04},         {0xFF, 0xF8, 0xFF}}, 
/*4*/{1, 1, {   END_STOCHASTIC_PATTERN}, {0xB8},                     {0xFC}}, 
/*5*/{4, 1, {   END_STOCHASTIC_PATTERN}, {0xE9},                     {0xFD}}
};

StochasticPattern Virut_AB_Patt2[]=
{
    {1, 2, {END_STOCHASTIC_PATTERN}, {0x30, 0x10},                   {0xFF, 0xFF}},                   // Xor [eax], dl
    {1, 1, {END_STOCHASTIC_PATTERN}, {0x60},                         {0xFF}},                         // Pusha
    {1, 5, {END_STOCHASTIC_PATTERN}, {0x64, 0xA1, 0x34, 0x00, 0x00}, {0xFF, 0xFF, 0xFF, 0xFF, 0xFF}}, // Mov eax, fs:[34]
    {1, 3, {END_STOCHASTIC_PATTERN}, {0x80, 0x3B, 0x4D},             {0xFF, 0xFF, 0xFF}},             // Cmp byte ptr [ebx], 'M'
    {1, 4, {END_STOCHASTIC_PATTERN}, {0x80, 0x7B, 0x01, 0x5A},       {0xFF, 0xFF, 0xFF, 0xFF}},       // Cmp byte ptr [ebx+1], 'Z'
    {1, 4, {END_STOCHASTIC_PATTERN}, {0x81, 0x44, 0x24, 0x20},       {0xFF, 0xFF, 0xFF, 0xFF}},       // Add [esp+20h], Number;EntryPoint
    {1, 5, {END_STOCHASTIC_PATTERN}, {0x81, 0xC3, 0x00, 0xFF, 0xFF}, {0xFF, 0xFF, 0xFF, 0xFF, 0xFF}}, // Add ebx, -100
    {1, 3, {END_STOCHASTIC_PATTERN}, {0x8B, 0x43, 0x3C},             {0xFF, 0xFF, 0xFF}},             // Mov eax, [ebx+3Ch]
    {1, 4, {END_STOCHASTIC_PATTERN}, {0x8B, 0x54, 0x18, 0x78},       {0xFF, 0xFF, 0xFF, 0xFF}},       // Mov edx, [eax+ebx+78h]
    {1, 4, {END_STOCHASTIC_PATTERN}, {0x8B, 0x6C, 0x24, 0x20},       {0xFF, 0xFF, 0xFF, 0xFF}},       // Mov ebp, [esp+20h]
    {1, 3, {END_STOCHASTIC_PATTERN}, {0x8B, 0x72, 0x20},             {0xFF, 0xFF, 0xFF}},             // Mov esi, [edx+20h]
    {1, 3, {END_STOCHASTIC_PATTERN}, {0x8D, 0x14, 0x1A},             {0xFF, 0xFF, 0xFF}},             // Lea edx, [edx+ebx]
    {1, 2, {END_STOCHASTIC_PATTERN}, {0xCD, 0x2E},                   {0xFF, 0xFF}},                   // Int 2Eh
    {1, 5, {END_STOCHASTIC_PATTERN}, {0xE8, 0x00, 0x00, 0x00, 0x00}, {0xFF, 0x00, 0xFF, 0xFF, 0xFF}}  // CALL < 255
};

StochasticPattern Virut_AC_Patt[]=
{
    {1, 2, {END_STOCHASTIC_PATTERN}, {0x34, 0x4D},                   {0xFF, 0xFF}},                   // XOR  ah, 'M'
    {1, 1, {END_STOCHASTIC_PATTERN}, {0x60},                         {0xFF}},                         // Pusha
    {1, 5, {END_STOCHASTIC_PATTERN}, {0x64, 0xFF, 0x35, 0x34, 0x00}, {0xFF, 0xFF, 0xFF, 0xFF, 0xFF}}, // Push fs:[34]
    {1, 2, {END_STOCHASTIC_PATTERN}, {0x6B, 0x1C},                   {0xFF, 0xFF}},                   // Xchg ebp, [ebx+1Ch]
    {1, 3, {END_STOCHASTIC_PATTERN}, {0x80, 0xF4, 0x5A},             {0xFF, 0xFF, 0xFF}},             // XOR  ah, 'Z'
    {1, 5, {END_STOCHASTIC_PATTERN}, {0x81, 0xEB, 0x00, 0x01, 0x00}, {0xFF, 0xFF, 0xFF, 0xFF, 0xFF}}, // Sub  ebx, 100
    {1, 2, {END_STOCHASTIC_PATTERN}, {0x8B, 0x03},                   {0xFF, 0xFF}},                   // Mov  eax, [ebx]
    {1, 3, {END_STOCHASTIC_PATTERN}, {0x8B, 0x43, 0x3C},             {0xFF, 0xFF, 0xFF}},             // Mov  eax, [ebx+3Ch]
    {1, 4, {END_STOCHASTIC_PATTERN}, {0x8B, 0x54, 0x18, 0x78},       {0xFF, 0xFF, 0xFF, 0xFF}},       // Mov  edx, [eax+ebx+78h]
    {1, 3, {END_STOCHASTIC_PATTERN}, {0x8B, 0x72, 0x20},             {0xFF, 0xFF, 0xFF}},             // Mov  esi, [edx+20h]
    {1, 3, {END_STOCHASTIC_PATTERN}, {0x8D, 0x14, 0x1A},             {0xFF, 0xFF, 0xFF}},             // Lea  edx, [edx+ebx]
    {1, 1, {END_STOCHASTIC_PATTERN}, {0xBD},                         {0xFF}},                         // Mov  ebp, Entry Piont
    {1, 2, {END_STOCHASTIC_PATTERN}, {0xCD, 0x2E},                   {0xFF, 0xFF}},                   // Int  2Eh
    {1, 5, {END_STOCHASTIC_PATTERN}, {0xE8, 0x00, 0x00, 0x00, 0x00}, {0xFF, 0x00, 0xFF, 0xFF, 0xFF}}  // CALL < 255
};

StochasticPattern Virut_AI_Patt[]=
{
    {1, 2, {END_STOCHASTIC_PATTERN}, {0x2C, 0x4B},                   {0xFF, 0xFF}},                   // Sub  al, 'K'
    {2, 1, {END_STOCHASTIC_PATTERN}, {0x58},                         {0xFF}},                         // Pop  eax
    {1, 1, {END_STOCHASTIC_PATTERN}, {0x60},                         {0xFF}},                         // Pusha
    {1, 1, {END_STOCHASTIC_PATTERN}, {0x61},                         {0xFF}},                         // Popa
    {1, 3, {END_STOCHASTIC_PATTERN}, {0x64, 0xFF, 0x30},             {0xFF, 0xFF, 0xFF}},             // Push fs:[eax]
    {1, 2, {END_STOCHASTIC_PATTERN}, {0x6A, 0x34},                   {0xFF, 0xFF}},                   // Push, 34h
    {1, 3, {END_STOCHASTIC_PATTERN}, {0x80, 0xEC, 0x5A},             {0xFF, 0xFF, 0xFF}},             // Sub  ah, 'Z'
    {1, 2, {END_STOCHASTIC_PATTERN}, {0x81, 0xED},                   {0xFF, 0xFF}},                   // Sub  ebp, Entry Piont
    {1, 4, {END_STOCHASTIC_PATTERN}, {0x8D, 0x5C, 0x24, 0x0D},       {0xFF, 0xFF, 0xFF, 0xFF}},       // Lea  ebx, [esp+0Dh]
    {1, 5, {END_STOCHASTIC_PATTERN}, {0x8D, 0x9B, 0x00, 0xFF, 0xFF}, {0xFF, 0xFF, 0xFF, 0xFF, 0xFF}}, // Lea  ebx, [ebx-100h]
    {1, 2, {END_STOCHASTIC_PATTERN}, {0xCD, 0x2E},                   {0xFF, 0xFF}},                   // Int  2Eh
    {1, 5, {END_STOCHASTIC_PATTERN}, {0xE8, 0x00, 0x00, 0x00, 0x00}, {0xFF, 0x00, 0xFF, 0xFF, 0xFF}}, // CALL < 0
    {1, 2, {END_STOCHASTIC_PATTERN}, {0xFF, 0x35},                   {0xFF, 0xFF}},                   // Push API
    {1, 5, {END_STOCHASTIC_PATTERN}, {0xFF, 0x95, 0xBF, 0xFC, 0xFF}, {0xFF, 0xFF, 0xFF, 0xFF, 0xFF}}  // call dword ptr [ebp-341h]
};
